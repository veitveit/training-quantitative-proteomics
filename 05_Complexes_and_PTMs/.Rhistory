points(-1:4, t(avProts[i,]), pch=16, col=cols[i], cex=1, type="b")
}
lines(-1:4, avComplex, lwd=2)
legend("bottomleft", legend = c(rownames(Prots), "Complex"), fill=c(cols,"#000000"), border=0,cex=0.5)
#' Alternatively, one can plot them using the `heatmap` function to cluster the proteins
#' according to similarities in their expression profiles
#' This does not make much sense for only 3 proteins
tmax <- max(abs(avProts), na.rm=T)
heatmap.2(as.matrix(avProts), scale="none", labCol = paste("Day", -1:4), main=cname,
breaks = seq(-tmax, tmax, length=101),
col=redblue(100), trace="none", dendrogram = "row")
# Get the peptide table and average over replicates
ModPeps <- NULL
for (peps in PComplex$PTMs_Raw) {
ModPeps <- rbind(ModPeps, peps)
}
avModPeps <- NULL
for(i in 1:6) avModPeps <- cbind(avModPeps,rowMeans(ModPeps[,3+(i-1)*3+1:3], na.rm=T))
rownames(avModPeps) <- ModPeps[,1]
#' Again, plot the expression profiles
cols <- rainbow(nrow(modPeps), alpha = 0.5)
prots <- names(table(modPeps[,3]))
plot(rep(-1:4, each=3), t(modPeps[1,4:ncol(modPeps)]), xaxt="n", xlab="Day after initiation", ylab="relative log-abundance",
pch=1, col=cols[1], cex=0.5, ylim=range(modPeps[,4:ncol(modPeps)], na.rm=T), main=cname)
axis(1, at = -1:4, labels=-1:4)
for (i in 2:nrow(modPeps)) {
points(rep(-1:4, each=3), t(modPeps[i,4:ncol(modPeps)]), pch=which(prots == modPeps[i,3]), col=cols[i], cex=0.5)
}
for (i in 1:nrow(avModPeps)) {
points(-1:4, t(avModPeps[i,]), pch=which(prots == modPeps[i,3]), col=cols[i], cex=1, type="b")
}
legend("bottomleft", legend = c(ModPeps[,1]), fill=c(cols), cex=0.3, border=0)
#' This becomes very fast very messy. Hierarchical clustering can help us with ordering
#' the peptides according to their quantitative behavior
tmax <- max(abs(avModPeps), na.rm=T)
heatmap.2(as.matrix(avModPeps),dendrogram="row", scale="none", main=cname, labRow = ModPeps[,1], labCol=paste("Day",-1:4),
cexRow = 0.5, trace = "none", breaks=seq(-tmax, tmax, length=101), col = redblue(100))
heatmap.2(as.matrix(rbind(avModPeps,avProts)), dendrogram="row", scale="none", cexRow = 0.5,
trace = "none", breaks=seq(-tmax, tmax, length=101), col = redblue(100),
labCol = paste("Day", -1:4), main=cname)
#' Even this visualization is not very informative. We can use correlations to get a better idea
#' of co-regulations between proteins and modified peptides
allprots <- c(rownames(avProts), avModPeps[,3])
heatmap.2(cor(t(rbind(avProts,avModPeps))),symm = T,trace="none",labRow = c(rownames(avProts), rownames(avModPeps)),labCol = c(rownames(avProts), paste0("mod",ModPeps[,3])),
breaks=seq(-1,1,0.01),col=redblue, RowSideColors=c(rep("#222222",nrow(avProts)), rep("#BBBBBB",nrow(avModPeps))),
ColSideColors = rainbow(length(unique(allprots)))[as.factor(allprots)], srtCol = 45)
legend(0.8,1.2, fill=c("#222222","#BBBBBB","#FFFFFF"), legend = c("modified peptide", "protein", "color: corresponding protein"), border=0, cex=0.5, xpd=T)
#' Let's take the "Polycomb repressive complex" (PRC1). It catalyses monoubiquitination
#' of histone H2A on Lys119, promoting gene silencing.
#'
#' Now get the content of the protein and peptide expressions of this complex
#cname <- "Polycomb repressive complex"
cname <- select.list(sort(names(complexes)))
#' Now, select other complexes and run the workflow above again. Check whether there have been measured more than one proteins as it will fail
#' otherwise
cname <- select.list(sort(names(complexes)))
#' Let's take the "Polycomb repressive complex" (PRC1). It catalyses monoubiquitination
#' of histone H2A on Lys119, promoting gene silencing.
#'
#' Now get the content of the protein and peptide expressions of this complex
PComplex <- complexes[cname][[1]]
names(PComplex)
#Protein subunits
PComplex$Composition
# number of peptides per subunit
lapply(PComplex$PTMs_Raw, nrow)
#' Now we extract the protein expression patterns, calculated from the quantitative behavior of their non-modified peptides
#' Then we calculate the averages over each of the three replicates.
Prots <- PComplex$Proteins[,2:ncol(PComplex$Proteins)]
rownames(Prots) <- PComplex$Proteins[,1]
avProts <- NULL
for(i in 1:6) avProts <- cbind(avProts,rowMeans(Prots[,(i-1)*3+1:3], na.rm=T))
avComplex <- sapply(1:6, function(i) mean(PComplex$Complex[(i-1)*3+1:3], na.rm=T))
#' The following commands visualize all replicated values and their averages for all three proteins
cols <- rainbow(nrow(Prots), alpha = 0.5)
plot(rep(-1:4, each=3), t(Prots[1,]), xaxt="n", xlab="Day after initiation", ylab="relative log-abundance",
pch=15, col=cols[1], cex=0.5, ylim=range(Prots, na.rm=T), main=cname)
axis(1, at = -1:4, labels=-1:4)
for (i in 2:nrow(Prots)) {
points(rep(-1:4, each=3), t(Prots[i,]), pch=15, col=cols[i], cex=0.5)
}
for (i in 1:nrow(avProts)) {
points(-1:4, t(avProts[i,]), pch=16, col=cols[i], cex=1, type="b")
}
lines(-1:4, avComplex, lwd=2)
legend("bottomleft", legend = c(rownames(Prots), "Complex"), fill=c(cols,"#000000"), border=0,cex=0.5)
#' Alternatively, one can plot them using the `heatmap` function to cluster the proteins
#' according to similarities in their expression profiles
#' This does not make much sense for only 3 proteins
tmax <- max(abs(avProts), na.rm=T)
heatmap.2(as.matrix(avProts), scale="none", labCol = paste("Day", -1:4), main=cname,
breaks = seq(-tmax, tmax, length=101),
col=redblue(100), trace="none", dendrogram = "row")
# Get the peptide table and average over replicates
ModPeps <- NULL
for (peps in PComplex$PTMs_Raw) {
ModPeps <- rbind(ModPeps, peps)
}
avModPeps <- NULL
for(i in 1:6) avModPeps <- cbind(avModPeps,rowMeans(ModPeps[,3+(i-1)*3+1:3], na.rm=T))
rownames(avModPeps) <- ModPeps[,1]
#' Again, plot the expression profiles
cols <- rainbow(nrow(modPeps), alpha = 0.5)
prots <- names(table(modPeps[,3]))
plot(rep(-1:4, each=3), t(modPeps[1,4:ncol(modPeps)]), xaxt="n", xlab="Day after initiation", ylab="relative log-abundance",
pch=1, col=cols[1], cex=0.5, ylim=range(modPeps[,4:ncol(modPeps)], na.rm=T), main=cname)
axis(1, at = -1:4, labels=-1:4)
for (i in 2:nrow(modPeps)) {
points(rep(-1:4, each=3), t(modPeps[i,4:ncol(modPeps)]), pch=which(prots == modPeps[i,3]), col=cols[i], cex=0.5)
}
for (i in 1:nrow(avModPeps)) {
points(-1:4, t(avModPeps[i,]), pch=which(prots == modPeps[i,3]), col=cols[i], cex=1, type="b")
}
legend("bottomleft", legend = c(ModPeps[,1]), fill=c(cols), cex=0.3, border=0)
#' This becomes very fast very messy. Hierarchical clustering can help us with ordering
#' the peptides according to their quantitative behavior
tmax <- max(abs(avModPeps), na.rm=T)
heatmap.2(as.matrix(avModPeps),dendrogram="row", scale="none", main=cname, labRow = ModPeps[,1], labCol=paste("Day",-1:4),
cexRow = 0.5, trace = "none", breaks=seq(-tmax, tmax, length=101), col = redblue(100))
heatmap.2(as.matrix(rbind(avModPeps,avProts)), dendrogram="row", scale="none", cexRow = 0.5,
trace = "none", breaks=seq(-tmax, tmax, length=101), col = redblue(100),
labCol = paste("Day", -1:4), main=cname)
#' Even this visualization is not very informative. We can use correlations to get a better idea
#' of co-regulations between proteins and modified peptides
allprots <- c(rownames(avProts), avModPeps[,3])
heatmap.2(cor(t(rbind(avProts,avModPeps))),symm = T,trace="none",labRow = c(rownames(avProts), rownames(avModPeps)),labCol = c(rownames(avProts), paste0("mod",ModPeps[,3])),
breaks=seq(-1,1,0.01),col=redblue, RowSideColors=c(rep("#222222",nrow(avProts)), rep("#BBBBBB",nrow(avModPeps))),
ColSideColors = rainbow(length(unique(allprots)))[as.factor(allprots)], srtCol = 45)
legend(0.8,1.2, fill=c("#222222","#BBBBBB","#FFFFFF"), legend = c("modified peptide", "protein", "color: corresponding protein"), border=0, cex=0.5, xpd=T)
#' Now, select other complexes and run the workflow above again. Check whether there have been measured more than one proteins as it will fail
#' otherwise
cname <- select.list(sort(names(complexes)))
PComplex <- complexes[cname][[1]]
names(PComplex)
#Protein subunits
PComplex$Composition
# number of peptides per subunit
lapply(PComplex$PTMs_Raw, nrow)
#' Now we extract the protein expression patterns, calculated from the quantitative behavior of their non-modified peptides
#' Then we calculate the averages over each of the three replicates.
Prots <- PComplex$Proteins[,2:ncol(PComplex$Proteins)]
rownames(Prots) <- PComplex$Proteins[,1]
avProts <- NULL
for(i in 1:6) avProts <- cbind(avProts,rowMeans(Prots[,(i-1)*3+1:3], na.rm=T))
avComplex <- sapply(1:6, function(i) mean(PComplex$Complex[(i-1)*3+1:3], na.rm=T))
#' The following commands visualize all replicated values and their averages for all three proteins
cols <- rainbow(nrow(Prots), alpha = 0.5)
plot(rep(-1:4, each=3), t(Prots[1,]), xaxt="n", xlab="Day after initiation", ylab="relative log-abundance",
pch=15, col=cols[1], cex=0.5, ylim=range(Prots, na.rm=T), main=cname)
axis(1, at = -1:4, labels=-1:4)
for (i in 2:nrow(Prots)) {
points(rep(-1:4, each=3), t(Prots[i,]), pch=15, col=cols[i], cex=0.5)
}
for (i in 1:nrow(avProts)) {
points(-1:4, t(avProts[i,]), pch=16, col=cols[i], cex=1, type="b")
}
lines(-1:4, avComplex, lwd=2)
legend("bottomleft", legend = c(rownames(Prots), "Complex"), fill=c(cols,"#000000"), border=0,cex=0.5)
#' Alternatively, one can plot them using the `heatmap` function to cluster the proteins
#' according to similarities in their expression profiles
#' This does not make much sense for only 3 proteins
tmax <- max(abs(avProts), na.rm=T)
heatmap.2(as.matrix(avProts), scale="none", labCol = paste("Day", -1:4), main=cname,
breaks = seq(-tmax, tmax, length=101),
col=redblue(100), trace="none", dendrogram = "row")
# Get the peptide table and average over replicates
ModPeps <- NULL
for (peps in PComplex$PTMs_Raw) {
ModPeps <- rbind(ModPeps, peps)
}
avModPeps <- NULL
for(i in 1:6) avModPeps <- cbind(avModPeps,rowMeans(ModPeps[,3+(i-1)*3+1:3], na.rm=T))
rownames(avModPeps) <- ModPeps[,1]
#' Again, plot the expression profiles
cols <- rainbow(nrow(modPeps), alpha = 0.5)
prots <- names(table(modPeps[,3]))
plot(rep(-1:4, each=3), t(modPeps[1,4:ncol(modPeps)]), xaxt="n", xlab="Day after initiation", ylab="relative log-abundance",
pch=1, col=cols[1], cex=0.5, ylim=range(modPeps[,4:ncol(modPeps)], na.rm=T), main=cname)
axis(1, at = -1:4, labels=-1:4)
for (i in 2:nrow(modPeps)) {
points(rep(-1:4, each=3), t(modPeps[i,4:ncol(modPeps)]), pch=which(prots == modPeps[i,3]), col=cols[i], cex=0.5)
}
for (i in 1:nrow(avModPeps)) {
points(-1:4, t(avModPeps[i,]), pch=which(prots == modPeps[i,3]), col=cols[i], cex=1, type="b")
}
legend("bottomleft", legend = c(ModPeps[,1]), fill=c(cols), cex=0.3, border=0)
#' This becomes very fast very messy. Hierarchical clustering can help us with ordering
#' the peptides according to their quantitative behavior
tmax <- max(abs(avModPeps), na.rm=T)
heatmap.2(as.matrix(avModPeps),dendrogram="row", scale="none", main=cname, labRow = ModPeps[,1], labCol=paste("Day",-1:4),
cexRow = 0.5, trace = "none", breaks=seq(-tmax, tmax, length=101), col = redblue(100))
# Get the peptide table and average over replicates
ModPeps <- NULL
for (peps in PComplex$PTMs_Raw) {
ModPeps <- rbind(ModPeps, peps)
}
avModPeps <- NULL
for(i in 1:6) avModPeps <- cbind(avModPeps,rowMeans(ModPeps[,3+(i-1)*3+1:3], na.rm=T))
rownames(avModPeps) <- ModPeps[,1]
ModPeps
#' Again, plot the expression profiles
cols <- rainbow(nrow(modPeps), alpha = 0.5)
prots <- names(table(modPeps[,3]))
# Get the peptide table and average over replicates
ModPeps <- NULL
for (peps in PComplex$PTMs_Raw) {
ModPeps <- rbind(ModPeps, peps)
}
avModPeps <- NULL
for(i in 1:6) avModPeps <- cbind(avModPeps,rowMeans(ModPeps[,3+(i-1)*3+1:3], na.rm=T))
rownames(avModPeps) <- ModPeps[,1]
#' Again, plot the expression profiles
cols <- rainbow(nrow(ModPeps), alpha = 0.5)
prots <- names(table(ModPeps[,3]))
plot(rep(-1:4, each=3), t(modPeps[1,4:ncol(ModPeps)]), xaxt="n", xlab="Day after initiation", ylab="relative log-abundance",
pch=1, col=cols[1], cex=0.5, ylim=range(ModPeps[,4:ncol(ModPeps)], na.rm=T), main=cname)
axis(1, at = -1:4, labels=-1:4)
for (i in 2:nrow(ModPeps)) {
points(rep(-1:4, each=3), t(ModPeps[i,4:ncol(ModPeps)]), pch=which(prots == ModPeps[i,3]), col=cols[i], cex=0.5)
}
for (i in 1:nrow(avModPeps)) {
points(-1:4, t(avModPeps[i,]), pch=which(prots == ModPeps[i,3]), col=cols[i], cex=1, type="b")
}
plot(rep(-1:4, each=3), t(ModPeps[1,4:ncol(ModPeps)]), xaxt="n", xlab="Day after initiation", ylab="relative log-abundance",
pch=1, col=cols[1], cex=0.5, ylim=range(ModPeps[,4:ncol(ModPeps)], na.rm=T), main=cname)
axis(1, at = -1:4, labels=-1:4)
for (i in 2:nrow(ModPeps)) {
points(rep(-1:4, each=3), t(ModPeps[i,4:ncol(ModPeps)]), pch=which(prots == ModPeps[i,3]), col=cols[i], cex=0.5)
}
for (i in 1:nrow(avModPeps)) {
points(-1:4, t(avModPeps[i,]), pch=which(prots == ModPeps[i,3]), col=cols[i], cex=1, type="b")
}
legend("bottomleft", legend = c(ModPeps[,1]), fill=c(cols), cex=0.3, border=0)
#' This becomes very fast very messy. Hierarchical clustering can help us with ordering
#' the peptides according to their quantitative behavior
tmax <- max(abs(avModPeps), na.rm=T)
heatmap.2(as.matrix(avModPeps),dendrogram="row", scale="none", main=cname, labRow = ModPeps[,1], labCol=paste("Day",-1:4),
cexRow = 0.5, trace = "none", breaks=seq(-tmax, tmax, length=101), col = redblue(100))
heatmap.2(as.matrix(rbind(avModPeps,avProts)), dendrogram="row", scale="none", cexRow = 0.5,
trace = "none", breaks=seq(-tmax, tmax, length=101), col = redblue(100),
labCol = paste("Day", -1:4), main=cname)
#' Even this visualization is not very informative. We can use correlations to get a better idea
#' of co-regulations between proteins and modified peptides
allprots <- c(rownames(avProts), avModPeps[,3])
heatmap.2(cor(t(rbind(avProts,avModPeps))),symm = T,trace="none",labRow = c(rownames(avProts), rownames(avModPeps)),labCol = c(rownames(avProts), paste0("mod",ModPeps[,3])),
breaks=seq(-1,1,0.01),col=redblue, RowSideColors=c(rep("#222222",nrow(avProts)), rep("#BBBBBB",nrow(avModPeps))),
ColSideColors = rainbow(length(unique(allprots)))[as.factor(allprots)], srtCol = 45)
legend(0.8,1.2, fill=c("#222222","#BBBBBB","#FFFFFF"), legend = c("modified peptide", "protein", "color: corresponding protein"), border=0, cex=0.5, xpd=T)
#' Now, select other complexes and run the workflow above again. Check whether there have been measured more than one proteins as it will fail
#' otherwise
cname <- select.list(sort(names(complexes)))
?select.list
#' Now, select other complexes and run the workflow above again. Check whether there have been measured more than one proteins as it will fail
#' otherwise
cname <- select.list(sort(names(complexes)), graphics=T)
#' Let's take the "Polycomb repressive complex" (PRC1). It catalyses monoubiquitination
#' of histone H2A on Lys119, promoting gene silencing.
#'
#' Now get the content of the protein and peptide expressions of this complex
PComplex <- complexes[cname][[1]]
names(PComplex)
#Protein subunits
PComplex$Composition
# number of peptides per subunit
lapply(PComplex$PTMs_Raw, nrow)
#' Now we extract the protein expression patterns, calculated from the quantitative behavior of their non-modified peptides
#' Then we calculate the averages over each of the three replicates.
Prots <- PComplex$Proteins[,2:ncol(PComplex$Proteins)]
rownames(Prots) <- PComplex$Proteins[,1]
avProts <- NULL
for(i in 1:6) avProts <- cbind(avProts,rowMeans(Prots[,(i-1)*3+1:3], na.rm=T))
avComplex <- sapply(1:6, function(i) mean(PComplex$Complex[(i-1)*3+1:3], na.rm=T))
#' The following commands visualize all replicated values and their averages for all three proteins
cols <- rainbow(nrow(Prots), alpha = 0.5)
plot(rep(-1:4, each=3), t(Prots[1,]), xaxt="n", xlab="Day after initiation", ylab="relative log-abundance",
pch=15, col=cols[1], cex=0.5, ylim=range(Prots, na.rm=T), main=cname)
axis(1, at = -1:4, labels=-1:4)
for (i in 2:nrow(Prots)) {
points(rep(-1:4, each=3), t(Prots[i,]), pch=15, col=cols[i], cex=0.5)
}
for (i in 1:nrow(avProts)) {
points(-1:4, t(avProts[i,]), pch=16, col=cols[i], cex=1, type="b")
}
lines(-1:4, avComplex, lwd=2)
legend("bottomleft", legend = c(rownames(Prots), "Complex"), fill=c(cols,"#000000"), border=0,cex=0.5)
#' Alternatively, one can plot them using the `heatmap` function to cluster the proteins
#' according to similarities in their expression profiles
#' This does not make much sense for only 3 proteins
tmax <- max(abs(avProts), na.rm=T)
heatmap.2(as.matrix(avProts), scale="none", labCol = paste("Day", -1:4), main=cname,
breaks = seq(-tmax, tmax, length=101),
col=redblue(100), trace="none", dendrogram = "row")
# Get the peptide table and average over replicates
ModPeps <- NULL
for (peps in PComplex$PTMs_Raw) {
ModPeps <- rbind(ModPeps, peps)
}
avModPeps <- NULL
for(i in 1:6) avModPeps <- cbind(avModPeps,rowMeans(ModPeps[,3+(i-1)*3+1:3], na.rm=T))
rownames(avModPeps) <- ModPeps[,1]
#' Again, plot the expression profiles
cols <- rainbow(nrow(ModPeps), alpha = 0.5)
prots <- names(table(ModPeps[,3]))
plot(rep(-1:4, each=3), t(ModPeps[1,4:ncol(ModPeps)]), xaxt="n", xlab="Day after initiation", ylab="relative log-abundance",
pch=1, col=cols[1], cex=0.5, ylim=range(ModPeps[,4:ncol(ModPeps)], na.rm=T), main=cname)
axis(1, at = -1:4, labels=-1:4)
for (i in 2:nrow(ModPeps)) {
points(rep(-1:4, each=3), t(ModPeps[i,4:ncol(ModPeps)]), pch=which(prots == ModPeps[i,3]), col=cols[i], cex=0.5)
}
for (i in 1:nrow(avModPeps)) {
points(-1:4, t(avModPeps[i,]), pch=which(prots == ModPeps[i,3]), col=cols[i], cex=1, type="b")
}
legend("bottomleft", legend = c(ModPeps[,1]), fill=c(cols), cex=0.3, border=0)
#' This becomes very fast very messy. Hierarchical clustering can help us with ordering
#' the peptides according to their quantitative behavior
tmax <- max(abs(avModPeps), na.rm=T)
heatmap.2(as.matrix(avModPeps),dendrogram="row", scale="none", main=cname, labRow = ModPeps[,1], labCol=paste("Day",-1:4),
cexRow = 0.5, trace = "none", breaks=seq(-tmax, tmax, length=101), col = redblue(100))
heatmap.2(as.matrix(rbind(avModPeps,avProts)), dendrogram="row", scale="none", cexRow = 0.5,
trace = "none", breaks=seq(-tmax, tmax, length=101), col = redblue(100),
labCol = paste("Day", -1:4), main=cname)
#' Even this visualization is not very informative. We can use correlations to get a better idea
#' of co-regulations between proteins and modified peptides
allprots <- c(rownames(avProts), avModPeps[,3])
heatmap.2(cor(t(rbind(avProts,avModPeps))),symm = T,trace="none",labRow = c(rownames(avProts), rownames(avModPeps)),labCol = c(rownames(avProts), paste0("mod",ModPeps[,3])),
breaks=seq(-1,1,0.01),col=redblue, RowSideColors=c(rep("#222222",nrow(avProts)), rep("#BBBBBB",nrow(avModPeps))),
ColSideColors = rainbow(length(unique(allprots)))[as.factor(allprots)], srtCol = 45)
legend(0.8,1.2, fill=c("#222222","#BBBBBB","#FFFFFF"), legend = c("modified peptide", "protein", "color: corresponding protein"), border=0, cex=0.5, xpd=T)
#' Now, select other complexes and run the workflow above again. Check whether there have been measured more than one proteins as it will fail
#' otherwise
cname <- select.list(sort(names(complexes)), graphics=T)
#' Let's take the "Polycomb repressive complex" (PRC1). It catalyses monoubiquitination
#' of histone H2A on Lys119, promoting gene silencing.
#'
#' Now get the content of the protein and peptide expressions of this complex
PComplex <- complexes[cname][[1]]
names(PComplex)
#Protein subunits
PComplex$Composition
# number of peptides per subunit
lapply(PComplex$PTMs_Raw, nrow)
#' Now we extract the protein expression patterns, calculated from the quantitative behavior of their non-modified peptides
#' Then we calculate the averages over each of the three replicates.
Prots <- PComplex$Proteins[,2:ncol(PComplex$Proteins)]
rownames(Prots) <- PComplex$Proteins[,1]
avProts <- NULL
for(i in 1:6) avProts <- cbind(avProts,rowMeans(Prots[,(i-1)*3+1:3], na.rm=T))
avComplex <- sapply(1:6, function(i) mean(PComplex$Complex[(i-1)*3+1:3], na.rm=T))
#' The following commands visualize all replicated values and their averages for all three proteins
cols <- rainbow(nrow(Prots), alpha = 0.5)
plot(rep(-1:4, each=3), t(Prots[1,]), xaxt="n", xlab="Day after initiation", ylab="relative log-abundance",
pch=15, col=cols[1], cex=0.5, ylim=range(Prots, na.rm=T), main=cname)
axis(1, at = -1:4, labels=-1:4)
for (i in 2:nrow(Prots)) {
points(rep(-1:4, each=3), t(Prots[i,]), pch=15, col=cols[i], cex=0.5)
}
for (i in 1:nrow(avProts)) {
points(-1:4, t(avProts[i,]), pch=16, col=cols[i], cex=1, type="b")
}
lines(-1:4, avComplex, lwd=2)
legend("bottomleft", legend = c(rownames(Prots), "Complex"), fill=c(cols,"#000000"), border=0,cex=0.5)
#' Alternatively, one can plot them using the `heatmap` function to cluster the proteins
#' according to similarities in their expression profiles
#' This does not make much sense for only 3 proteins
tmax <- max(abs(avProts), na.rm=T)
heatmap.2(as.matrix(avProts), scale="none", labCol = paste("Day", -1:4), main=cname,
breaks = seq(-tmax, tmax, length=101),
col=redblue(100), trace="none", dendrogram = "row")
# Get the peptide table and average over replicates
ModPeps <- NULL
for (peps in PComplex$PTMs_Raw) {
ModPeps <- rbind(ModPeps, peps)
}
avModPeps <- NULL
for(i in 1:6) avModPeps <- cbind(avModPeps,rowMeans(ModPeps[,3+(i-1)*3+1:3], na.rm=T))
rownames(avModPeps) <- ModPeps[,1]
#' Again, plot the expression profiles
cols <- rainbow(nrow(ModPeps), alpha = 0.5)
prots <- names(table(ModPeps[,3]))
plot(rep(-1:4, each=3), t(ModPeps[1,4:ncol(ModPeps)]), xaxt="n", xlab="Day after initiation", ylab="relative log-abundance",
pch=1, col=cols[1], cex=0.5, ylim=range(ModPeps[,4:ncol(ModPeps)], na.rm=T), main=cname)
axis(1, at = -1:4, labels=-1:4)
for (i in 2:nrow(ModPeps)) {
points(rep(-1:4, each=3), t(ModPeps[i,4:ncol(ModPeps)]), pch=which(prots == ModPeps[i,3]), col=cols[i], cex=0.5)
}
knitr::spin()
?knitr::spin
setwd("~/Teaching/QuantWorkshop/PTMComplexes")
knitr::spin("./MainWorkflow.R")
knitr::spin("./MainWorkflow.R")
getwd()
knitr::spin("./MainWorkflow.R")
knitr::render("./MainWorkflow.R")
render_html("MainWorkflow.R")
knitr::spin("./MainWorkflow.R")
knitr::spin("./MainWorkflow.R")
knitr::spin("./MainWorkflow.R")
knitr::spin("./MainWorkflow.R")
knit2html(spin(knit = FALSE), force_v1 = TRUE)
knitr::knit2html(spin(knit = FALSE), force_v1 = TRUE)
library(knitr)
knitr::knit2html(spin(knit = FALSE), force_v1 = TRUE)
knitr::knit2html(spin(knit = FALSE), force_v1 = TRUE, "complex_structure.RData")
knitr::knit2html(spin(knit = FALSE), force_v1 = TRUE, "MainWorkflow.R")
#' ---
#' title: "Functional analysis of post-translational modification on protein complexes"
#' output:
#'   html_document:
#'        keep_md: true
#' ---
#'
#' Load libraries for visualization
library(gplots)
library(lattice)
knitr::opts_chunk$set(echo = TRUE, eval=FALSE)
#' Load basic data structure with peptide and proteins expression profiles
#'
#' The data corresponds to satellite cells differentiating in to muscle cells. This
#' process is driven by signalling events leading to the necessary changes in  the transcriptional
#' programme, cell behavior and morphology
#' TODO: copy description from other notebook, add details about replicates, ...
complexes <- readRDS("complex_structure.RData")
#' The data is arranged into known protein complexes from the CORUM data base (https://mips.helmholtz-muenchen.de/corum/),
#' containing the following number of complexes
length(complexes)
print(names(complexes))
#' You can check for different names that match a pattern like "olyco"
grep("olycom", names(complexes),value=T)
cname <- "Polycomb repressive complex"
#' Let's take the "Polycomb repressive complex" (PRC1). It catalyses monoubiquitination
#' of histone H2A on Lys119, promoting gene silencing.
#'
#' Now get the content of the protein and peptide expressions of this complex
PComplex <- complexes[cname][[1]]
names(PComplex)
#Protein subunits
PComplex$Composition
# number of peptides per subunit
lapply(PComplex$PTMs_Raw, nrow)
#' Now we extract the protein expression patterns, calculated from the quantitative behavior of their non-modified peptides
#' Then we calculate the averages over each of the three replicates.
Prots <- PComplex$Proteins[,2:ncol(PComplex$Proteins)]
rownames(Prots) <- PComplex$Proteins[,1]
avProts <- NULL
for(i in 1:6) avProts <- cbind(avProts,rowMeans(Prots[,(i-1)*3+1:3], na.rm=T))
avComplex <- sapply(1:6, function(i) mean(PComplex$Complex[(i-1)*3+1:3], na.rm=T))
#' The following commands visualize all replicated values and their averages for all three proteins
cols <- rainbow(nrow(Prots), alpha = 0.5)
plot(rep(-1:4, each=3), t(Prots[1,]), xaxt="n", xlab="Day after initiation", ylab="relative log-abundance",
pch=15, col=cols[1], cex=0.5, ylim=range(Prots, na.rm=T), main=cname)
axis(1, at = -1:4, labels=-1:4)
for (i in 2:nrow(Prots)) {
points(rep(-1:4, each=3), t(Prots[i,]), pch=15, col=cols[i], cex=0.5)
}
for (i in 1:nrow(avProts)) {
points(-1:4, t(avProts[i,]), pch=16, col=cols[i], cex=1, type="b")
}
lines(-1:4, avComplex, lwd=2)
legend("bottomleft", legend = c(rownames(Prots), "Complex"), fill=c(cols,"#000000"), border=0,cex=0.5)
#' Alternatively, one can plot them using the `heatmap` function to cluster the proteins
#' according to similarities in their expression profiles
#' This does not make much sense for only 3 proteins
tmax <- max(abs(avProts), na.rm=T)
heatmap.2(as.matrix(avProts), scale="none", labCol = paste("Day", -1:4), main=cname,
breaks = seq(-tmax, tmax, length=101),
col=redblue(100), trace="none", dendrogram = "row")
#' modified peptides of the proteins can show different behavior and often
#' provide information about particular different protein and complex functions
# Get the peptide table and average over replicates
ModPeps <- NULL
for (peps in PComplex$PTMs_Raw) {
ModPeps <- rbind(ModPeps, peps)
}
avModPeps <- NULL
for(i in 1:6) avModPeps <- cbind(avModPeps,rowMeans(ModPeps[,3+(i-1)*3+1:3], na.rm=T))
rownames(avModPeps) <- ModPeps[,1]
#' Again, plot the expression profiles
cols <- rainbow(nrow(ModPeps), alpha = 0.5)
prots <- names(table(ModPeps[,3]))
plot(rep(-1:4, each=3), t(ModPeps[1,4:ncol(ModPeps)]), xaxt="n", xlab="Day after initiation", ylab="relative log-abundance",
pch=1, col=cols[1], cex=0.5, ylim=range(ModPeps[,4:ncol(ModPeps)], na.rm=T), main=cname)
axis(1, at = -1:4, labels=-1:4)
for (i in 2:nrow(ModPeps)) {
points(rep(-1:4, each=3), t(ModPeps[i,4:ncol(ModPeps)]), pch=which(prots == ModPeps[i,3]), col=cols[i], cex=0.5)
}
for (i in 1:nrow(avModPeps)) {
points(-1:4, t(avModPeps[i,]), pch=which(prots == ModPeps[i,3]), col=cols[i], cex=1, type="b")
}
legend("bottomleft", legend = c(ModPeps[,1]), fill=c(cols), cex=0.3, border=0)
#' This becomes very fast very messy. Hierarchical clustering can help us with ordering
#' the peptides according to their quantitative behavior
tmax <- max(abs(avModPeps), na.rm=T)
heatmap.2(as.matrix(avModPeps),dendrogram="row", scale="none", main=cname, labRow = ModPeps[,1], labCol=paste("Day",-1:4),
cexRow = 0.5, trace = "none", breaks=seq(-tmax, tmax, length=101), col = redblue(100))
heatmap.2(as.matrix(rbind(avModPeps,avProts)), dendrogram="row", scale="none", cexRow = 0.5,
trace = "none", breaks=seq(-tmax, tmax, length=101), col = redblue(100),
labCol = paste("Day", -1:4), main=cname)
#' Even this visualization is not very informative. We can use correlations to get a better idea
#' of co-regulations between proteins and modified peptides
allprots <- c(rownames(avProts), avModPeps[,3])
heatmap.2(cor(t(rbind(avProts,avModPeps))),symm = T,trace="none",labRow = c(rownames(avProts), rownames(avModPeps)),labCol = c(rownames(avProts), paste0("mod",ModPeps[,3])),
breaks=seq(-1,1,0.01),col=redblue, RowSideColors=c(rep("#222222",nrow(avProts)), rep("#BBBBBB",nrow(avModPeps))),
ColSideColors = rainbow(length(unique(allprots)))[as.factor(allprots)], srtCol = 45)
legend(0.8,1.2, fill=c("#222222","#BBBBBB","#FFFFFF"), legend = c("modified peptide", "protein", "color: corresponding protein"), border=0, cex=0.5, xpd=T)
#' Now, select other complexes and run the workflow above again. Check whether there have been measured more than one proteins as it will fail
#' otherwise
cname <- select.list(sort(names(complexes)), graphics=T)
knitr::knit2html(spin(knit = FALSE), force_v1 = TRUE)
knitr::knit2html(spin("MainWorkflow.R",knit = FALSE), force_v1 = TRUE)
library(rmd2jupyter)
rmd2jupyter("MainWorkflow.Rmd")
?heatmap.2
